package com.eeit109team6.memberDao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;

public class MemberDaoJdbcImpl implements IMemberDao {

	private Connection conn;
	private Session session;
	private SessionFactory sessionFactory;

	
	public MemberDaoJdbcImpl (SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}
	@Override
	public int add(Member m) throws SQLException {
		getSessionFactory().getCurrentSession().save(m);

		return m.getMember_id();

	}

	@Override
	public void update(Member m) throws SQLException {
		String sqlcode = "update member set  account = ?,password = ?,username = ?,idnumber = ?,sex = ?,birth = ? where member_id = ? ";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		state.setString(1, m.getAccount());
		state.setString(2, m.getPassword());
		state.setString(3, m.getUsername());
		state.setString(4, m.getIdnumber());
		state.setString(5, m.getSex());
		state.setString(6, m.getBirth());
		state.setInt(7, m.getMember_id());
		state.executeUpdate();
		state.close();
	}

	@Override
	public void delete(Member m) throws SQLException {
		// TODO Auto-generated method stub

	}

	@Override
	public ArrayList<Member> fintAll() throws SQLException {
		ArrayList<Member> memberList = new ArrayList<Member>();
//		List<String> memberColName = new ArrayList<String>();
		String sqlcode = "select * from member ";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		ResultSet rs = state.executeQuery();
//		ResultSetMetaData metadata = rs.getMetaData();
//		for (int i = 0 ;i< metadata.getColumnCount() ;i++) {
//			memberColName.add(metadata.getColumnName(i));
//		}
		while (rs.next()) {
			Member m = new Member();
			m.setMember_id(rs.getInt("member_id"));
			m.setAccount(rs.getString("account"));
			m.setPassword(rs.getString("password"));
			m.setUsername(rs.getString("username"));
			m.setIdnumber(rs.getString("idnumber"));
			m.setSex(rs.getString("sex"));
			m.setBirth(rs.getString("birth"));
			m.setRegisteredtime(rs.getString("registeredtime"));
			memberList.add(m);

//			private int member_id;
//			private String account ;
//			private String password ;
//			private String username ;
//			private String idnumber ;
//			private String sex ;
//			private String birth ;
//			private String registeredtime ;

//			state.setString(1, m.getAccount());
//			state.setString(2, m.getPassword());
//			state.setString(3, m.getUsername());
//			state.setString(4, m.getIdnumber());
//			state.setString(5, m.getSex());
//			state.setString(6, m.getBirth());
//			state.setString(7, m.getRegisteredtime());

		}
		rs.close();
		state.close();
		return memberList;
	}

	@Override
	public Member fintById(Member m) throws SQLException {
		String sqlcode = "select * from member where member_id = ? and token = ?";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		state.setInt(1, m.getMember_id());
		state.setString(2, m.getToken());
		ResultSet rs = state.executeQuery();
		Member mem = null;
		if (rs.next()) {
			mem = new Member();
			mem.setMember_id(rs.getInt("member_id"));
			mem.setAccount(rs.getString("account"));
			mem.setPassword(rs.getString("password"));
			mem.setUsername(rs.getString("username"));
			mem.setIdnumber(rs.getString("idnumber"));
			mem.setSex(rs.getString("sex"));
			mem.setBirth(rs.getString("birth"));
			mem.setRegisteredtime(rs.getString("registeredtime"));

		}
		return mem;
	}

	@Override
	public Member login(Member m) throws SQLException {
		String sqlcode = "select *  from member where account = ? and password = ? and isactive = 1";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		state.setString(1, m.getAccount());
		state.setString(2, m.getPassword());
		ResultSet rs = state.executeQuery();
		Member memberData = null;

		while (rs.next()) {
			memberData = new Member();
			System.out.println("rs.getInt(\"member_id\")==" + rs.getInt("member_id"));
			memberData.setMember_id(rs.getInt("member_id"));
			memberData.setAccount(rs.getString("account"));
			memberData.setPassword(rs.getString("password"));
			memberData.setToken(rs.getString("token"));
			memberData.setUsername(rs.getString("username"));
			memberData.setIdnumber(rs.getString("idnumber"));
			memberData.setSex(rs.getString("sex"));
			memberData.setBirth(rs.getString("birth"));
			memberData.setRegisteredtime(rs.getString("registeredtime"));

		}
		rs.close();
		state.close();
		return memberData;
	}

	@Override
	public boolean openActive(Member m) throws SQLException {
		Query query = getSessionFactory().getCurrentSession().createQuery("from Member where member_id = ?1 and token = ?2");
		query.setParameter(1, m.getMember_id());
		query.setParameter(2, m.getToken());
		return false;
//		String sqlcode = "update member set isactive = 1 where member_id = ? and token = '" + m.getToken()
//				+ "' and isactive = 0";
//		PreparedStatement state = conn.prepareStatement(sqlcode);
//		state.setInt(1, m.getMember_id());
//		System.out.println("m.getMember_id()=" + m.getMember_id());
//		System.out.println("m.getToken()=" + m.getToken());
////		state.setString(2, m.getToken());
//		int check = state.executeUpdate();
//		if (check == 1) {
//			state.close();
//			return true;
//		} else {
//			return false;
//		}
	}

	@Override
	public void forgetPwd(Member m) throws SQLException {

		String sqlcode = "update member set  token = ? where account = ? ";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		state.setString(1, m.getToken());
		state.setString(2, m.getAccount());

		state.executeUpdate();
		state.close();

	}

	@Override
	public void changePwd(Member m) throws SQLException {
		String sqlcode = "update member set password=? where account =?  and token = ?";
		PreparedStatement state = conn.prepareStatement(sqlcode);
		state.setString(1, m.getPassword());
		state.setString(2, m.getAccount());
		state.setString(3, m.getToken());
		int i = state.executeUpdate();

		state.close();
	}

	@Override
	public boolean checkAccount(Member m) throws SQLException {
		System.out.println("checkAccount");
		List<Member> memList = null;
		Query query = getSessionFactory().getCurrentSession().createQuery("from Member where account = ?1");
		System.out.println("m.getAccount()" + m.getAccount());
		query.setParameter(1, m.getAccount());
		memList = (List<Member>) query.getResultList();

		if (memList.size() != 0) {
			return false;
		} else {
			return true;
		}

	}



}
